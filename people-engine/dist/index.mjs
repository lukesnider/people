var e={fetch:async(e,t)=>await async function(e,t){try{const s=e.headers.get("Upgrade");if(!s||"websocket"!==s)return new Response("Expected Upgrade: websocket",{status:426});let i=t.PEOPLE.idFromName("Meeting Hall"),a=t.PEOPLE.get(i);return await a.fetch(e)}catch(e){return new Response(e.message,{status:200})}}(e,t)};class t{constructor(e,t){this.state=e,this.people={},this.state.blockConcurrencyWhile((async()=>{let e=await this.state.storage.get("sessions");this.sessions=e||[]}))}async fetch(e){const t=new WebSocketPair,[s,i]=Object.values(t);let a=i;a.accept();let n={webSocket:a},o=!1;this.sessions.push(n),a.addEventListener("message",(async e=>{if(n.quit)return a.close(1011,"WebSocket broken."),void delete this.people[n.uid];let t=JSON.parse(e.data);if(t.clean_house)return void(this.people={});if(t.update_position&&(this.people[t.update_position.uid].position=t.update_position.position,this.broadcast(JSON.stringify(t))),!o)return n.name=""+(t.name||"anonymous"),n.uid=t.uid,t.position||(t.position={x:50,y:50}),this.people[t.uid]=t,this.broadcast(JSON.stringify({joined:t})),a.send(JSON.stringify({people:this.people})),o=!0,new Response(null,{status:101,webSocket:s});t={name:n.name,message:""+t.message},t.timestamp=Math.max(Date.now(),this.lastTimestamp+1),this.lastTimestamp=t.timestamp;let i=JSON.stringify(t);this.broadcast(i)}));let r=e=>{n.quit=!0,this.sessions=this.sessions.filter((e=>e!==n)),n.name&&(this.broadcast(JSON.stringify({quit:n})),delete this.people[n.uid])};return a.addEventListener("close",r),a.addEventListener("error",r),new Response(null,{status:101,webSocket:s})}broadcast(e){"string"!=typeof e&&(e=JSON.stringify(e));let t=[];this.sessions=this.sessions.filter((s=>{try{return s.webSocket.send(e),!0}catch(e){return s.quit=!0,t.push(s),!1}})),t.forEach((e=>{this.broadcast({quit:e})}))}}export{t as People,e as default};
//# sourceMappingURL=index.mjs.map
