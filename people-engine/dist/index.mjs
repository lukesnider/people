var t={fetch:async(t,e)=>await async function(t,e){try{const s=t.headers.get("Upgrade");if(!s||"websocket"!==s)return new Response("Expected Upgrade: websocket",{status:426});let i=e.PEOPLE.idFromName("Meeting Hall"),r=e.PEOPLE.get(i);return await r.fetch(t)}catch(t){return new Response(t.message,{status:200})}}(t,e)};class e{constructor(t,e){this.state=t,this.people={},this.kd={},this.structures={},this.state.blockConcurrencyWhile((async()=>{let t=await this.state.storage.get("structures");this.structures=t||{};let e=await this.state.storage.get("kd");this.kd=e||{}}))}async fetch(t){const e=new WebSocketPair,[s,i]=Object.values(e);let r=i;r.accept();let a={webSocket:r},u=!1;this.sessions.push(a),r.addEventListener("message",(async t=>{if(a.quit)return r.close(1011,"WebSocket broken."),void delete this.people[a.uid];let e=JSON.parse(t.data);if(e.update_position)return this.people[e.update_position.uid].position=e.update_position.position,void this.broadcast(JSON.stringify(e));if(e.build_structure){let t={uid:e.build_structure.uid,player:e.build_structure.player_uid,pos:e.build_structure.pos};return this.structures[t.uid]=t,void this.broadcast(JSON.stringify({add_structure:t}),a.uid)}if(e.destroy_structure)return delete this.structures[e.destroy_structure.uid],void this.broadcast(JSON.stringify({destroy_structure:e.destroy_structure}),a.uid);if(e.build_bullet){let t={uid:e.build_bullet.uid,player_uid:e.build_bullet.player_uid,player_uid:e.build_bullet.player_uid,pos:e.build_bullet.pos,move:e.build_bullet.move};return void this.broadcast(JSON.stringify({add_bullet:t}),a.uid)}if(e.player_hit){let t=e.player_hit.shooter,s=e.player_hit.hit,i={timestampe:Date.now(),player:s.uid};return this.kd[t.uid]?this.kd[t.uid].kills.push(i):this.kd[t.uid]={name:t.name,kills:[i],deaths:[]},this.kd[s.uid]?this.kd[s.uid].deaths.push(i):this.kd[s.uid]={name:s.name,kills:[],deaths:[i]},this.broadcast(JSON.stringify({kill:e.player_hit})),void this.broadcast(JSON.stringify({kd_update:this.kd}))}if(!u)return a.name=""+(e.name||"anonymous"),a.uid=e.uid,e.position||(e.position={x:50,y:50}),this.people[e.uid]=e,this.broadcast(JSON.stringify({joined:e})),r.send(JSON.stringify({people:this.people})),r.send(JSON.stringify({structures:this.structures})),r.send(JSON.stringify({kd_update:this.kd})),u=!0,new Response(null,{status:101,webSocket:s});e={name:a.name,message:""+e.message},e.timestamp=Math.max(Date.now(),this.lastTimestamp+1),this.lastTimestamp=e.timestamp;let i=JSON.stringify(e);this.broadcast(i)}));let d=async t=>{await this.state.storage.put("structures",this.value),await this.state.storage.put("kd",this.value),a.quit=!0,this.sessions=this.sessions.filter((t=>t!==a)),a.name&&(this.kd[a.uid].name=a.name,this.broadcast(JSON.stringify({quit:a})),delete this.people[a.uid])};return r.addEventListener("close",d),r.addEventListener("error",d),new Response(null,{status:101,webSocket:s})}broadcast(t,e=!1){"string"!=typeof t&&(t=JSON.stringify(t));let s=[];this.sessions=this.sessions.filter((i=>{try{return e&&i.uid!=e&&i.webSocket.send(t),e||i.webSocket.send(t),!0}catch(t){return i.quit=!0,s.push(i),!1}})),s.forEach((t=>{this.broadcast({quit:t})}))}}export{e as People,t as default};
//# sourceMappingURL=index.mjs.map
