{"version":3,"file":"index.mjs","sources":["../src/index.mjs"],"sourcesContent":["// import jwt from \"@tsndr/cloudflare-worker-jwt\";\nconst corsHeaders = {\n  \"content-type\": \"application/json;charset=UTF-8\",\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Methods\": \"GET,HEAD,POST,OPTIONS\",\n  \"Access-Control-Allow-Headers\": \"*\",\n}\n// Worker\nexport default {\n  async fetch(request, env) {\n    return await handleRequest(request, env);\n  }\n}\n\nasync function handleRequest(request, env) {\n  try {\n    const upgradeHeader = request.headers.get(\"Upgrade\")\n    if (!upgradeHeader || upgradeHeader !== \"websocket\") {\n      return new Response(\"Expected Upgrade: websocket\", { status: 426 })\n    }\n    let id = env.PEOPLE.idFromName(\"Meeting Hall\");\n    let obj = env.PEOPLE.get(id);\n    let response = await obj.fetch(request);\n    return response;\n  } catch(error) {\n    return new Response(error.message, {\n      status: 200,\n    })\n  }\n}\n// Durable Object\n\nexport class People {\n  constructor(state, env) {\n    this.state = state;\n    this.people = {};\n    this.state.blockConcurrencyWhile(async () => {\n        let stored_sessions= await this.state.storage.get(\"sessions\");\n        this.sessions = stored_sessions || [];\n    })\n  }\n  // Handle HTTP requests from clients.\n  async fetch(request) {\n    // let auth_email=false,decoded=false;\n    // const url = new URL(request.url)\n    // let jwt_token = url.searchParams.get(\"token\");\n    // try {\n    //   let isValid = await jwt.verify(jwt_token,USER_PW_SECRET);\n    //   if(!isValid) {\n    //     return new Response(\"Invalid Token\", {\n    //       headers: corsHeaders,\n    //       status: 403,\n    //     })\n    //   }\n    //   decoded = await jwt.decode(jwt_token);\n    //   auth_email = decoded.email;\n    // } catch(err) {\n    //   return new Response(err.message, {\n    //     headers: corsHeaders,\n    //     status: 403,\n    //   })\n    // }\n    const webSocketPair = new WebSocketPair()\n    const [client, server] = Object.values(webSocketPair)\n    let webSocket = server\n    webSocket.accept()\n    let session = {webSocket};\n    let receivedUserInfo = false;\n    this.sessions.push(session);\n    webSocket.addEventListener(\"message\", async msg => {\n      if (session.quit) {\n        webSocket.close(1011, \"WebSocket broken.\");\n        delete this.people[session.uid];\n        return;\n      }\n      let data = JSON.parse(msg.data);\n      if(data.clean_house) {\n        this.people = {}\n        return;\n      }\n      if(data.update_position) {\n        this.people[data.update_position.uid].position = data.update_position.position;\n        this.broadcast(JSON.stringify(data));\n      }\n      if(!receivedUserInfo){\n        session.name = \"\" + (data.name || \"anonymous\");\n        session.uid = data.uid;\n        if(!data.position) data.position = {x:50,y:50};\n        this.people[data.uid] = data;\n        this.broadcast(JSON.stringify({joined: data}));\n        webSocket.send(JSON.stringify({people: this.people}));\n        receivedUserInfo = true;\n        return new Response(null, {\n          status: 101,\n          webSocket: client\n        })\n      }\n      data = { name: session.name, message: \"\" + data.message };\n      data.timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n      this.lastTimestamp = data.timestamp;\n      let dataStr = JSON.stringify(data);\n      this.broadcast(dataStr);\n    })\n    let closeOrErrorHandler = evt => {\n      session.quit = true;\n      this.sessions = this.sessions.filter(member => member !== session);\n      if (session.name) {\n        this.broadcast(JSON.stringify({quit: session}));\n        delete this.people[session.uid];\n      }\n    };\n    webSocket.addEventListener(\"close\", closeOrErrorHandler);\n    webSocket.addEventListener(\"error\", closeOrErrorHandler);\n    return new Response(null, {\n      // headers: {\n      //   \"ERRORLOG\": auth_email\n      // },\n      status: 101,\n      webSocket: client\n    })\n  }\n  broadcast(message) {\n    if (typeof message !== \"string\") {\n      message = JSON.stringify(message);\n    }\n    let quitters = [];\n    this.sessions = this.sessions.filter(session => {\n      try {\n        session.webSocket.send(message);\n        return true;\n      } catch (err) {\n        session.quit = true;\n        quitters.push(session);\n        return false;\n      }\n    });\n    quitters.forEach(quitter => {\n      this.broadcast({quit: quitter});\n    });\n  }\n\n}\n"],"names":["async","request","env","upgradeHeader","headers","get","Response","status","id","PEOPLE","idFromName","obj","fetch","error","message","handleRequest","People","constructor","state","this","people","blockConcurrencyWhile","stored_sessions","storage","sessions","webSocketPair","WebSocketPair","client","server","Object","values","webSocket","accept","session","receivedUserInfo","push","addEventListener","quit","close","uid","data","JSON","parse","msg","clean_house","update_position","position","broadcast","stringify","name","x","y","joined","send","timestamp","Math","max","Date","now","lastTimestamp","dataStr","closeOrErrorHandler","evt","filter","member","quitters","err","forEach","quitter"],"mappings":"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"}