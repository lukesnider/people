{"version":3,"file":"index.mjs","sources":["../src/index.mjs"],"sourcesContent":["// import jwt from \"@tsndr/cloudflare-worker-jwt\";\nconst corsHeaders = {\n  \"content-type\": \"application/json;charset=UTF-8\",\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Methods\": \"GET,HEAD,POST,OPTIONS\",\n  \"Access-Control-Allow-Headers\": \"*\",\n}\n// Worker\nexport default {\n  async fetch(request, env) {\n    return await handleRequest(request, env);\n  }\n}\nasync function handleRequest(request, env) {\n  try {\n    const upgradeHeader = request.headers.get(\"Upgrade\")\n    if (!upgradeHeader || upgradeHeader !== \"websocket\") {\n      return new Response(\"Expected Upgrade: websocket\", { status: 426 })\n    }\n    let id = env.PEOPLE.idFromName(\"Meeting Hall\");\n    let obj = env.PEOPLE.get(id);\n    let response = await obj.fetch(request);\n    return response;\n  } catch(error) {\n    return new Response(error.message, {\n      status: 200,\n    })\n  }\n}\n// Durable Object\nexport class People {\n  constructor(state, env) {\n    this.state = state;\n    this.people = {};\n    this.structures = {};\n    this.state.blockConcurrencyWhile(async () => {\n        let stored_structures= await this.state.storage.get(\"structures\");\n        this.structures = stored_structures || {};\n        let stored_sessions= await this.state.storage.get(\"sessions\");\n        this.sessions = stored_sessions || [];\n        let stored_people= await this.state.storage.get(\"people\");\n        this.people = stored_people || {};\n    })\n  }\n  // Handle HTTP requests from clients.\n  async fetch(request) {\n    // let auth_email=false,decoded=false;\n    // const url = new URL(request.url)\n    // let jwt_token = url.searchParams.get(\"token\");\n    // try {\n    //   let isValid = await jwt.verify(jwt_token,USER_PW_SECRET);\n    //   if(!isValid) {\n    //     return new Response(\"Invalid Token\", {\n    //       headers: corsHeaders,\n    //       status: 403,\n    //     })\n    //   }\n    //   decoded = await jwt.decode(jwt_token);\n    //   auth_email = decoded.email;\n    // } catch(err) {\n    //   return new Response(err.message, {\n    //     headers: corsHeaders,\n    //     status: 403,\n    //   })\n    // }\n    const webSocketPair = new WebSocketPair()\n    const [client, server] = Object.values(webSocketPair)\n    let webSocket = server\n    webSocket.accept()\n    let session = {webSocket};\n    let receivedUserInfo = false;\n    this.sessions.push(session);\n    webSocket.addEventListener(\"message\", async msg => {\n      if (session.quit) {\n        webSocket.close(1011, \"WebSocket broken.\");\n        delete this.people[session.uid];\n        return;\n      }\n      let data = JSON.parse(msg.data);\n      if(data.update_position) {\n        this.people[data.update_position.uid].position = data.update_position.position;\n        this.broadcast(JSON.stringify(data));\n      }\n      if(data.build_structure) {\n        let structure = {\n          uid: data.build_structure.uid,\n          player: data.build_structure.player_uid,\n          pos: data.build_structure.pos,\n        };\n        this.structures[structure.uid] = structure;\n        this.broadcast(JSON.stringify({add_structure:structure}),structure.player_uid);\n      }\n      if(!receivedUserInfo){\n        session.name = \"\" + (data.name || \"anonymous\");\n        session.uid = data.uid;\n        if(!data.position) data.position = {x:50,y:50};\n        // if(!data.position) {\n        //   if(this.people[uid] && this.people[uid].position) {\n        //     data.position = this.people[uid].position;\n        //   }else{\n        //     data.position = {x:50,y:50};\n        //   }\n        // }\n        this.people[data.uid] = data;\n        this.broadcast(JSON.stringify({joined: data}));\n        webSocket.send(JSON.stringify({people: this.people}));\n        webSocket.send(JSON.stringify({structures: this.structures}));\n        receivedUserInfo = true;\n        return new Response(null, {\n          status: 101,\n          webSocket: client\n        })\n      }\n      data = { name: session.name, message: \"\" + data.message };\n      data.timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n      this.lastTimestamp = data.timestamp;\n      let dataStr = JSON.stringify(data);\n      this.broadcast(dataStr);\n    })\n    let closeOrErrorHandler = evt => {\n      session.quit = true;\n      this.sessions = this.sessions.filter(member => member !== session);\n      if (session.name) {\n        this.broadcast(JSON.stringify({quit: session}));\n        delete this.people[session.uid];\n      }\n    };\n    webSocket.addEventListener(\"close\", closeOrErrorHandler);\n    webSocket.addEventListener(\"error\", closeOrErrorHandler);\n    return new Response(null, {\n      // headers: {\n      //   \"ERRORLOG\": auth_email\n      // },\n      status: 101,\n      webSocket: client\n    })\n  }\n  broadcast(message,others = false) {\n    if (typeof message !== \"string\") {\n      message = JSON.stringify(message);\n    }\n    let quitters = [];\n    this.sessions = this.sessions.filter(session => {\n      try {\n        if(others && session.uid != others) {\n          session.webSocket.send(message);\n        }else {\n          session.webSocket.send(message);\n        }\n        return true;\n      } catch (err) {\n        session.quit = true;\n        quitters.push(session);\n        return false;\n      }\n    });\n    quitters.forEach(quitter => {\n      this.broadcast({quit: quitter});\n    });\n  }\n\n}\n"],"names":["async","request","env","upgradeHeader","headers","get","Response","status","id","PEOPLE","idFromName","obj","fetch","error","message","handleRequest","People","constructor","state","this","people","structures","blockConcurrencyWhile","stored_structures","storage","stored_sessions","sessions","stored_people","webSocketPair","WebSocketPair","client","server","Object","values","webSocket","accept","session","receivedUserInfo","push","addEventListener","quit","close","uid","data","JSON","parse","msg","update_position","position","broadcast","stringify","build_structure","structure","player","player_uid","pos","add_structure","name","x","y","joined","send","timestamp","Math","max","Date","now","lastTimestamp","dataStr","closeOrErrorHandler","evt","filter","member","others","quitters","err","forEach","quitter"],"mappings":"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"}