{"version":3,"file":"index.mjs","sources":["../src/index.mjs"],"sourcesContent":["// import jwt from \"@tsndr/cloudflare-worker-jwt\";\nconst corsHeaders = {\n  \"content-type\": \"application/json;charset=UTF-8\",\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Methods\": \"GET,HEAD,POST,OPTIONS\",\n  \"Access-Control-Allow-Headers\": \"*\",\n}\n// Worker\nexport default {\n  async fetch(request, env) {\n    return await handleRequest(request, env);\n  }\n}\nasync function handleRequest(request, env) {\n  try {\n    const upgradeHeader = request.headers.get(\"Upgrade\")\n    if (!upgradeHeader || upgradeHeader !== \"websocket\") {\n      return new Response(\"Expected Upgrade: websocket\", { status: 426 })\n    }\n    let id = env.PEOPLE.idFromName(\"Meeting Hall\");\n    let obj = env.PEOPLE.get(id);\n    let response = await obj.fetch(request);\n    return response;\n  } catch(error) {\n    return new Response(error.message, {\n      status: 200,\n    })\n  }\n}\n// Durable Object\nexport class People {\n  constructor(state, env) {\n    this.state = state;\n    this.sessions =  [];\n    this.people = {};\n    this.positions = {};\n    this.stats = {};\n    this.structures = {};\n    this.state.blockConcurrencyWhile(async () => {\n        let stored_structures= await this.state.storage.get(\"structures\");\n        this.structures = stored_structures || {};\n        let stored_stats= await this.state.storage.get(\"stats\");\n        this.stats = stored_stats || {};\n        let stored_positions= await this.state.storage.get(\"positions\");\n        this.positions = stored_positions || [];\n    })\n  }\n  // Handle HTTP requests from clients.\n  async fetch(request) {\n    // let auth_email=false,decoded=false;\n    // const url = new URL(request.url)\n    // let jwt_token = url.searchParams.get(\"token\");\n    // try {\n    //   let isValid = await jwt.verify(jwt_token,USER_PW_SECRET);\n    //   if(!isValid) {\n    //     return new Response(\"Invalid Token\", {\n    //       headers: corsHeaders,\n    //       status: 403,\n    //     })\n    //   }\n    //   decoded = await jwt.decode(jwt_token);\n    //   auth_email = decoded.email;\n    // } catch(err) {\n    //   return new Response(err.message, {\n    //     headers: corsHeaders,\n    //     status: 403,\n    //   })\n    // }\n    const webSocketPair = new WebSocketPair()\n    const [client, server] = Object.values(webSocketPair)\n    let webSocket = server\n    webSocket.accept()\n    let session = {webSocket};\n    let receivedUserInfo = false;\n    this.sessions.push(session);\n    webSocket.addEventListener(\"message\", async msg => {\n      if (session.quit) {\n        webSocket.close(1011, \"WebSocket broken.\");\n        delete this.people[session.uid];\n        return;\n      }\n      let data = JSON.parse(msg.data);\n      if(data.chat_message) {\n        this.broadcast(JSON.stringify({chat_message:data.chat_message}),session.uid);\n        return;\n      }\n      if(data.update_position) {\n        this.people[data.update_position.uid].position = data.update_position.position;\n        this.positions[data.update_position.uid] = data.update_position.position;\n        this.broadcast(JSON.stringify(data));\n        return;\n      }\n      if(data.build_structure) {\n        let structure = {\n          uid: data.build_structure.uid,\n          player: data.build_structure.player_uid,\n          pos: data.build_structure.pos,\n        };\n        this.structures[structure.uid] = structure;\n        this.stats[data.build_structure.player_uid].structures.built = this.stats[data.build_structure.player_uid].structures.built + 1;\n        this.broadcast(JSON.stringify({add_structure:structure}),session.uid);\n        this.broadcast(JSON.stringify({stats_update:this.stats}));\n        await this.state.storage.put(\"structures\", this.structures);\n        return;\n      }\n      if(data.destroy_structure) {\n        delete this.structures[data.destroy_structure.uid];\n        this.stats[data.destroy_structure.player_uid].structures.destroyed = this.stats[data.destroy_structure.player_uid].structures.destroyed + 1;\n        this.broadcast(JSON.stringify({destroy_structure:data.destroy_structure}),session.uid);\n        this.broadcast(JSON.stringify({stats_update:this.stats}));\n        await this.state.storage.put(\"structures\", this.structures);\n        return;\n      }\n      if(data.build_bullet) {\n        let bullet = {\n          uid: data.build_bullet.uid,\n          player_uid: data.build_bullet.player_uid,\n          player_uid: data.build_bullet.player_uid,\n          pos: data.build_bullet.pos,\n          move: data.build_bullet.move,\n        };\n        this.broadcast(JSON.stringify({add_bullet:bullet}),session.uid);\n        return;\n      }\n      if(data.player_hit) {\n        let shooter = data.player_hit.shooter;\n        let hit = data.player_hit.hit;\n        let kill =  {\n          timestampe: Date.now(),\n          player: hit.uid,\n        }\n        this.stats[shooter.uid].kills.push(kill)\n        this.stats[hit.uid].deaths.push(kill)\n        this.broadcast(JSON.stringify({kill:data.player_hit}));\n        this.broadcast(JSON.stringify({stats_update:this.stats}));\n        this.positions[hit.uid] = {\n          x: Math.random() * (500 - -500) + -500,\n          y: Math.random() * (500 - -500) + -500,\n        }\n        await this.state.storage.put(\"stats\", this.stats);\n        return;\n      }\n      if(!receivedUserInfo){\n        session.name = \"\" + (data.name || \"anonymous\");\n        session.uid = data.uid;\n        if(!this.positions[data.uid]) {\n          this.positions[data.uid] = {\n            x: Math.random() * (500 - -500) + -500,\n            y: Math.random() * (500 - -500) + -500,\n          }\n        }\n        if(!this.stats[data.uid]) {\n          this.stats[data.uid] = {\n            name: data.name,\n            structures: {\n              built: 0,\n              destroyed: 0,\n            },\n            kills: [],\n            deaths: [],\n          };\n        }\n        data.position = this.positions[data.uid];\n        await this.state.storage.put(\"stats\", this.stats);\n        this.people[data.uid] = data;\n        this.broadcast(JSON.stringify({joined: data}));\n        webSocket.send(JSON.stringify({people: this.people}));\n        webSocket.send(JSON.stringify({structures: this.structures}));\n        webSocket.send(JSON.stringify({stats_update: this.stats}));\n        receivedUserInfo = true;\n        return new Response(null, {\n          status: 101,\n          webSocket: client\n        })\n      }\n      data = { name: session.name, message: \"\" + data.message };\n      data.timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n      this.lastTimestamp = data.timestamp;\n      let dataStr = JSON.stringify(data);\n      this.broadcast(dataStr);\n    })\n    let closeOrErrorHandler = async (evt) => {\n      await this.state.storage.put(\"structures\", this.structures);\n      await this.state.storage.put(\"stats\", this.stats);\n      await this.state.storage.put(\"positions\", this.positions);\n      session.quit = true;\n      this.sessions = this.sessions.filter(member => member !== session);\n      if (session.name) {\n        this.stats[session.uid].name = session.name;\n        this.broadcast(JSON.stringify({quit: session}));\n        delete this.people[session.uid];\n      }\n    };\n    webSocket.addEventListener(\"close\", closeOrErrorHandler);\n    webSocket.addEventListener(\"error\", closeOrErrorHandler);\n    return new Response(null, {\n      // headers: {\n      //   \"ERRORLOG\": auth_email\n      // },\n      status: 101,\n      webSocket: client\n    })\n  }\n  broadcast(message,others = false) {\n    if (typeof message !== \"string\") {\n      message = JSON.stringify(message);\n    }\n    let quitters = [];\n    this.sessions = this.sessions.filter(session => {\n      try {\n        if(others && session.uid != others) {\n          session.webSocket.send(message);\n        }\n        if(!others) {\n          session.webSocket.send(message);\n        }\n        return true;\n      } catch (err) {\n        session.quit = true;\n        quitters.push(session);\n        return false;\n      }\n    });\n    quitters.forEach(quitter => {\n      this.broadcast({quit: quitter});\n    });\n  }\n\n}\n"],"names":["async","request","env","upgradeHeader","headers","get","Response","status","id","PEOPLE","idFromName","obj","fetch","error","message","handleRequest","People","constructor","state","this","sessions","people","positions","stats","structures","blockConcurrencyWhile","stored_structures","storage","stored_stats","stored_positions","webSocketPair","WebSocketPair","client","server","Object","values","webSocket","accept","session","receivedUserInfo","push","addEventListener","quit","close","uid","data","JSON","parse","msg","chat_message","broadcast","stringify","update_position","position","build_structure","structure","player","player_uid","pos","built","add_structure","stats_update","put","destroy_structure","destroyed","build_bullet","bullet","move","add_bullet","player_hit","shooter","hit","kill","timestampe","Date","now","kills","deaths","x","Math","random","y","name","joined","send","timestamp","max","lastTimestamp","dataStr","closeOrErrorHandler","evt","filter","member","others","quitters","err","forEach","quitter"],"mappings":"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"}